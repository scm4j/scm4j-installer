plugins {
	id 'java'
	id 'maven'
	id 'eclipse'
	id 'idea'
	id 'jacoco'
	id 'com.github.kt3k.coveralls' version '2.8.1'
	id 'com.github.johnrengelman.shadow' version '2.0.1'
	id 'edu.sc.seis.launch4j' version '2.4.1'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

group = 'org.scm4j'
version = new File('version').text

ext.mainClass = 'org.scm4j.installer.Installer'

repositories {
	jcenter()
	maven { url 'https://jitpack.io' }
}

configurations {
	shadowRuntime
}

dependencies {
	// load managed dependencies
	def s = '[ \t]*', w = '[^:#@\\s]+?'
	(file('mdeps').text =~ /(?m)^$s($w):($w):($w)?(:$w)?(@$w)?$s(?:#$s($w)?$s)?$/).each {
			match, group, name, version, classifier, ext, configuration ->
		add(configuration ?: 'compile', "$group:$name:${version?:'latest.integration'}${classifier?:''}${ext?:''}")
	}

	if (currentOS.windows)
		compileOnly "org.eclipse.swt:org.eclipse.swt.win32.win32.x86${is64bit()?'_64':''}:4.3"
	else if (currentOS.linux)
		compileOnly "org.eclipse.swt:org.eclipse.swt.gtk.linux.x86${is64bit()?'_64':''}:4.3"
	else if (currentOS.macOsX)
		compileOnly "org.eclipse.swt:org.eclipse.swt.cocoa.macosx.x86${is64bit()?'_64':''}:4.3"
	shadowRuntime 'org.eclipse.swt:org.eclipse.swt.win32.win32.x86:4.3'
	testCompile 'junit:junit:4.12'
}

configurations.all {
	resolutionStrategy {
		cacheDynamicVersionsFor 0, 'seconds'
		cacheChangingModulesFor 0, 'seconds'
	}
}

test {
 	testLogging {
		events "failed"
		exceptionFormat "full"
	}
}

jacocoTestReport {
	reports {
		xml.enabled = true // coveralls plugin depends on xml format report
		html.enabled = true
	}
}

jar {
	manifest.attributes (
		'Specification-Title': project.name,
		'Specification-Version': version.replaceAll(/-SNAPSHOT$/, ''),
		'Implementation-Title': project.name,
		'Implementation-Version': "$version (${new Date().format('yyyy-MM-dd')})",
		'Main-Class': mainClass,
	)
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives sourcesJar
	archives javadocJar
	archives file: file("$buildDir/launch4j/${project.name}.exe"), builtBy: tasks.launch4j
}

static def getCurrentOS() {
	return org.gradle.internal.os.OperatingSystem.current()
}

static def is64bit() {
	return System.getProperty('os.arch').contains('64')
}

shadowJar {
	configurations += [project.configurations.shadowRuntime]
}

launch4j {
	mainClassName = mainClass
	bundledJrePath = '../jre'
	jreRuntimeBits = '32'
	copyConfigurable = project.tasks.shadowJar.outputs.files
	jar = "lib/${project.tasks.shadowJar.archiveName}"
}

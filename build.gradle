plugins {
	id 'java'
	id 'maven'
	id 'eclipse'
	id 'idea'
	id 'jacoco'
	id 'com.github.kt3k.coveralls' version '2.8.1'
	id 'com.github.johnrengelman.shadow' version '2.0.1'
	id 'edu.sc.seis.launch4j' version '2.4.1'
	id 'org.scm4j.releaser.scm4j-releaser-gradle-plugin' version '0.2.0'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

group = 'org.scm4j'

ext.mainClass = 'org.scm4j.installer.Installer'

repositories {
	jcenter()
	maven { url 'https://jitpack.io' }
}

configurations {
	shadowRuntime
}

dependencies {
	def swtPostfix = (currentOS.windows ? 'win32.win32' : (currentOS.linux ? 'gtk.linux'
			: (currentOS.macOsX ? 'cocoa.macosx' : 'unknown'))) + '.x86' + (is64bit() ? '_64' : '')
	compileOnly "org.eclipse.swt:org.eclipse.swt.$swtPostfix:4.3"
	runtimeOnly "org.eclipse.swt:org.eclipse.swt.$swtPostfix:4.3"
	shadowRuntime 'org.eclipse.swt:org.eclipse.swt.win32.win32.x86:4.3'

	compile 'ch.qos.logback:logback-classic:1.2.3'
	compile 'commons-cli:commons-cli:1.4'

	testCompile 'junit:junit:4.12'
}

configurations.all {
	resolutionStrategy {
		cacheDynamicVersionsFor 0, 'seconds'
		cacheChangingModulesFor 0, 'seconds'
	}
}

test {
 	testLogging {
		events "failed"
		exceptionFormat "full"
	}
}

jacocoTestReport {
	reports {
		xml.enabled = true // coveralls plugin depends on xml format report
		html.enabled = true
	}
}

jar {
	manifest.attributes (
		'Specification-Title': project.name,
		'Specification-Version': version.replaceAll(/-SNAPSHOT$/, ''),
		'Implementation-Title': project.name,
		'Implementation-Version': "$version (${new Date().format('yyyy-MM-dd')})",
		'Main-Class': mainClass,
	)
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives sourcesJar
	archives javadocJar
	archives file: file("$buildDir/launch4j/${project.name}.exe"), builtBy: createExe
}

static def getCurrentOS() {
	return org.gradle.internal.os.OperatingSystem.current()
}

static def is64bit() {
	return System.getProperty('os.arch').contains('64')
}

shadowJar {
	configurations = [project.configurations.compile, project.configurations.shadowRuntime]
}

createExe {
	mainClassName = mainClass
	bundledJrePath = '../jre-1.8.0_171'
	jreRuntimeBits = '32'
	copyConfigurable = project.tasks.shadowJar.outputs.files
	jar = "lib/${project.tasks.shadowJar.archiveName}"
}
